// <auto-generated />
using System;
using CMCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CMCore.Migrations
{
    [DbContext(typeof(ContentManagerDbContext))]
    [Migration("20190125230519_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CMCore.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("CMCore.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CMCore.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CMCore.Models.Extension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Extensions");
                });

            modelBuilder.Entity("CMCore.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwsRegion");

                    b.Property<string>("Description");

                    b.Property<int>("ExtensionId");

                    b.Property<string>("Name");

                    b.Property<string>("PathName");

                    b.Property<string>("ThumbUrl");

                    b.HasKey("Id");

                    b.HasIndex("ExtensionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CMCore.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.ClubRegion", b =>
                {
                    b.Property<int>("ClubId");

                    b.Property<int>("RegionId");

                    b.HasKey("ClubId", "RegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("ClubRegions");
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.ClubType", b =>
                {
                    b.Property<int>("ClubId");

                    b.Property<int>("TypeId");

                    b.HasKey("ClubId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("ClubTypes");
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.FileClub", b =>
                {
                    b.Property<int>("FileId");

                    b.Property<int>("ClubId");

                    b.HasKey("FileId", "ClubId");

                    b.HasIndex("ClubId");

                    b.ToTable("FileClubs");
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.FileCompany", b =>
                {
                    b.Property<int>("FileId");

                    b.Property<int>("CompanyId");

                    b.HasKey("FileId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("FileCompanies");
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.FileTag", b =>
                {
                    b.Property<int>("FileId");

                    b.Property<int>("TagId");

                    b.HasKey("FileId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("CMCore.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CMCore.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("CMCore.Models.Country", b =>
                {
                    b.HasOne("CMCore.Models.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("CMCore.Models.File", b =>
                {
                    b.HasOne("CMCore.Models.Extension", "Extension")
                        .WithMany("Files")
                        .HasForeignKey("ExtensionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.ClubRegion", b =>
                {
                    b.HasOne("CMCore.Models.Club", "Club")
                        .WithMany("ClubRegions")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMCore.Models.Region", "Region")
                        .WithMany("ClubRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.ClubType", b =>
                {
                    b.HasOne("CMCore.Models.Club", "Club")
                        .WithMany("ClubTypes")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMCore.Models.Type", "Type")
                        .WithMany("ClubTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.FileClub", b =>
                {
                    b.HasOne("CMCore.Models.Club", "Club")
                        .WithMany("FileClubs")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMCore.Models.File", "File")
                        .WithMany("FileClubs")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.FileCompany", b =>
                {
                    b.HasOne("CMCore.Models.Company", "Company")
                        .WithMany("FileCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMCore.Models.File", "File")
                        .WithMany("FileCompanies")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMCore.Models.RelationModel.FileTag", b =>
                {
                    b.HasOne("CMCore.Models.File", "File")
                        .WithMany("FileTags")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMCore.Models.Tag", "Tag")
                        .WithMany("FileTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
